searchState.loadedDescShard("ab_contracts_common", 0, "Logically the same as <code>u128</code>, but aligned to <code>8</code> bytes instead …\nLogically the same as <code>u128</code>, but aligned to <code>8</code> bytes instead …\nA trait that indicates the struct is a contact.\nA trait that indicates the implementation of a contract …\nA trait that is implemented for <code>dyn ContractTrait</code> and …\nMain contract metadata, see <code>ContractMetadataKind</code> for …\nMax possible number of addresses per shard\nMax allowed size of the contract code\nMax possible number of shards\nMax possible shard index\nMax number of arguments in a method.\nTrait metadata, see <code>ContractMetadataKind</code> for encoding …\nSentinel contract address, inaccessible and not owned by …\nSystem contract for managing block state\nSystem contract for managing code of other contracts\nSystem contract for native token\nSystem simple wallet base contract that can be used by end …\nSystem contract for managing state of other contracts\nShard index\nSlot type used by this contract\nTmp type used by this contract\nSomething that can be used as “code” in native …\nGet the inner error code\nConvert contact error into contract exit code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a value from <code>u128</code>\nCreate shard index from <code>u32</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn value into <code>u128</code>\nConvert into <code>u64</code>\nCreate contract error with a custom error code.\nExit code indicating success\nSystem contract for address allocation on a particular …\nConvert shard index to <code>u32</code>.\nEphemeral execution environment.\nEnvironment state\nExecutor context that can be used to interact with executor\nKeep current context\nContext for method call.\nMethod to be called by the executor\nReplace context with current contract’s address\nReset context to <code>Address::NULL</code>\nCall prepared method\nCall a method at specified address and with specified …\nCall prepared method.\nCaller of this contract\nCaller of this contract\nContext of the execution\nContext of the execution\nAddress of the contract that contains a function to below …\nAnonymous pointer to a struct that implements <code>ExternalArgs</code> …\nFingerprint of the method being called\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate environment with executor context\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContext for method call\nOwn address of the contract\nOwn address of the contract\nExplicit padding, contents does not matter\nUsed to tie the lifetime to <code>ExternalArgs</code>\nPrepare a single method for calling at specified address …\nShard index where execution is happening\nShard index where execution is happening\nInstantiate environment with executor context\nMain contract metadata.\nMetadata for smart contact methods.\nRead-only <code>#[env]</code> argument.\nRead-write <code>#[env]</code> argument.\n<code>#[init]</code> method.\n<code>#[input]</code> argument.\nExplicit <code>#[output]</code> argument or <code>T</code> of …\nRead-only <code>#[slot]</code> argument with an address.\nRead-write <code>#[slot]</code> argument with an address.\nRead-only <code>#[tmp]</code> argument.\nRead-write <code>#[tmp]</code> argument.\nTrait metadata.\nStateful read-only <code>#[update]</code> method (has <code>&amp;self</code> in its …\nStateful read-write <code>#[update]</code> method (has <code>&amp;mut self</code> in its …\nStateless <code>#[update]</code> method (doesn’t have <code>self</code> in its …\nStateful read-only <code>#[view]</code> method (has <code>&amp;self</code> in its …\nStateless <code>#[view]</code> method (doesn’t have <code>self</code> in its …\nProduce compact metadata.\nProduce compact metadata for <code>ExternalArgs</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to create an instance from its <code>u8</code> representation\nCorresponds to <code>ContractMetadataKind::EnvRo</code>\nCorresponds to <code>ContractMetadataKind::EnvRw</code>\nExpected argument kind, found something else\nExpected contract or trait kind, found something else\nExpected method kind, found something else\nFailed to decode state type name\nCorresponds to <code>ContractMetadataKind::Init</code>\nCorresponds to <code>ContractMetadataKind::Input</code>\nInvalid argument I/O type\nInvalid first metadata byte\nInvalid state I/O type\nMetadata decoding error\nMultiple contracts found\nNot enough metadata to decode\nCorresponds to <code>ContractMetadataKind::Output</code>\nCorresponds to <code>ContractMetadataKind::SlotRo</code>\nCorresponds to <code>ContractMetadataKind::SlotRw</code>\nCorresponds to <code>ContractMetadataKind::TmpRo</code>\nCorresponds to <code>ContractMetadataKind::TmpRw</code>\nUnexpected argument kind\nUnexpected method kind\nCorresponds to <code>ContractMetadataKind::UpdateStatefulRo</code>\nCorresponds to <code>ContractMetadataKind::UpdateStatefulRw</code>\nCorresponds to <code>ContractMetadataKind::UpdateStateless</code>\nCorresponds to <code>ContractMetadataKind::ViewStateful</code>\nCorresponds to <code>ContractMetadataKind::ViewStateless</code>\nArgument name as bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod name as bytes.\nExceptions:\nState type name as bytes.\nTrait name as bytes.\nMarker trait for external arguments when calling methods.\nFingerprint of the method being called\nMetadata that corresponds to a method being called\nHash of method’s compact metadata, which uniquely …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new method fingerprint from its metadata.")