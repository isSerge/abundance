searchState.loadedDescShard("ab_system_contract_address_allocator", 0, "Extension trait that provides helper methods for calling …\nAllocate a new address for a contract.\nInitialize address allocator for a shard\nAllocate a new address for a contract.\nFFI code generated by procedural macro\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMax address to be allocated on this shard\nInitialize address allocator for a shard\nNext address to be allocated on this shard\nData structure containing expected input for external …\nData structure containing expected input to …\nMethod metadata, see <code>ContractMetadataKind</code> for encoding …\nFFI interface into a method, called by the host.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance\nCapacity of the allocated memory <code>ok_result_ptr</code> points to\nCapacity of the allocated memory <code>ok_result_ptr</code> points to\nThe size of the contents <code>ok_result_ptr</code> points to\nSize of the contents <code>ok_result_ptr</code> points to\nCapacity of the allocated memory following <code>self_ptr</code> points …\nSize of the contents <code>self_ptr</code> points to\nData structure containing expected input for external …\nData structure containing expected input to …\nMethod metadata, see <code>ContractMetadataKind</code> for encoding …\nFFI interface into a method, called by the host.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance\nCapacity of the allocated memory <code>ok_result_ptr</code> points to\nThe size of the contents <code>ok_result_ptr</code> points to")